{"version":3,"sources":["components/BitTable.tsx","utils/Utilities.ts","components/FieldTable.tsx","components/BitVisualizer.tsx","App.tsx","index.tsx"],"names":["getColor","bitFields","bitOffset","field","start","end","color","BitTable","props","bytes","byteOffset","bitCount","indexes","values","bit","isSet","byteCount","value","BigInt","push","TableCell","align","style","backgroundColor","Checkbox","checked","TableBody","TableRow","Table","padding","minWidth","size","randomColor","Math","random","toString","substr","FieldTable","nameRef","useRef","startRef","endRef","lenRef","Grid","container","direction","justify","alignItems","item","xs","sm","TextField","inputRef","fullWidth","type","variant","placeholder","onChange","ev","textbox","currentTarget","parseInt","endVal","current","lenVal","len","startVal","Button","onClick","name","some","alert","addBitField","TableHead","map","removeBitField","mask","extract","e","Field","useStyles","makeStyles","theme","main","marginTop","spacing","marginBottom","display","flexDirection","BitVisualizer","initialValue","initialBitFields","initialLittleEndian","useState","setValue","setBitFields","classes","Container","className","inputProps","textAlign","fontFamily","defaultValue","nval","text","err","parseValue","target","undefined","bitField","concat","filter","App","queryString","URLSearchParams","window","location","search","get","fields","JSON","parse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e9ce51c.chunk.js","sourcesContent":["import React from 'react'\r\nimport BitField from './BitField'\r\nimport { \r\n  Table, \r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Checkbox \r\n} from '@material-ui/core';\r\n\r\n// Check if this bit is part of a bitfield and return it's color, \r\n// otherwise return the default color.\r\nfunction getColor(bitFields: BitField[], bitOffset: number) {\r\n  for (const field of bitFields) {\r\n    if (bitOffset >= field.start && bitOffset <= field.end) {\r\n      return field.color;\r\n    }\r\n  }\r\n  return undefined;\r\n}\r\n\r\ninterface BitTableProps {\r\n  value: bigint\r\n  bitFields: BitField[]\r\n}\r\n\r\nexport function BitTable(props: BitTableProps) {\r\n  const bytes = [];\r\n  const bitCount: number = 64;\r\n  let byteCount = bitCount / 8;\r\n\r\n  for (let byteOffset = 0; byteOffset < byteCount; byteOffset++) {\r\n    const indexes = [];\r\n    const values = [];\r\n\r\n    for (let bit = 0; bit < 8; bit++) {\r\n      let bitOffset;\r\n      let isSet = false;\r\n\r\n      // if (props.littleEndian) {\r\n      //   bitOffset = (byteOffset * 8) + (7 - bit);\r\n      //   isSet = !!((props.value >> BigInt(bitOffset)) & BigInt(1));\r\n      // } else {\r\n      //   bitOffset = ((byteCount - 1 - byteOffset) * 8) + (7 - bit);\r\n      //   isSet = !!((props.value >> BigInt(bitOffset)) & BigInt(1));\r\n      // }\r\n      \r\n      bitOffset = ((byteCount - 1 - byteOffset) * 8) + (7 - bit);\r\n      isSet = !!((props.value >> BigInt(bitOffset)) & BigInt(1));\r\n      let color = getColor(props.bitFields, bitOffset);\r\n\r\n      indexes.push(\r\n        <TableCell align=\"center\">\r\n          <label>{bitOffset}</label>\r\n        </TableCell>\r\n      );\r\n\r\n      values.push(\r\n        <TableCell align=\"center\" style={{ backgroundColor: color }}>\r\n          <Checkbox checked={isSet} color=\"primary\" />\r\n        </TableCell>\r\n      );\r\n    }\r\n\r\n    bytes.push(\r\n      <TableBody>\r\n        <TableRow>\r\n          {indexes}\r\n        </TableRow>\r\n        <TableRow>\r\n          {values}\r\n        </TableRow>\r\n      </TableBody>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Table padding=\"none\" style={{minWidth: 650, padding:0}} size=\"small\">\r\n      {bytes}\r\n    </Table>\r\n  );\r\n}","export const randomColor = (): string => {\r\n    return \"#\" + \r\n        (0x1000000 + Math.random() * 0xffffff)\r\n        .toString()\r\n        .substr(1, 6) + \"80\"\r\n}","import React, { useRef } from 'react'\r\nimport BitField from './BitField';\r\nimport { randomColor } from '../utils/Utilities'\r\nimport { \r\n  Table, \r\n  TableHead, \r\n  TableRow, \r\n  TableCell, \r\n  TableBody, \r\n  TextField,\r\n  Grid,\r\n  Button\r\n} from '@material-ui/core';\r\n\r\nfunction Field(field: BitField, value: bigint,\r\n  removeBitField: (bitField: BitField) => void) {\r\n  let len = (field.end + 1) - field.start;\r\n  let mask = BigInt(1 << len) - BigInt(1) << BigInt(field.start);\r\n  let extract = (value & mask) >> BigInt(field.start);\r\n  return (\r\n    <TableRow style={{backgroundColor: field.color}}>\r\n      <TableCell>{field.name}</TableCell>\r\n      <TableCell>{field.start}</TableCell>\r\n      <TableCell>{field.end}</TableCell>\r\n      <TableCell>{len}</TableCell>\r\n      <TableCell>{extract.toString()}</TableCell>\r\n      <TableCell>{mask.toString(16)}</TableCell>\r\n      <TableCell>\r\n        <Button \r\n          variant=\"outlined\"\r\n          onClick={e => removeBitField(field)}>\r\n          Remove\r\n        </Button>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n\r\ninterface FieldTableProps {\r\n  value: bigint\r\n  bitFields: BitField[]\r\n  addBitField: (bitField: BitField) => void\r\n  removeBitField: (bitField: BitField) => void\r\n}\r\n\r\nexport const FieldTable = (props: FieldTableProps) => {\r\n  const nameRef = useRef<HTMLInputElement>(null!);\r\n  const startRef = useRef<HTMLInputElement>(null!);\r\n  const endRef = useRef<HTMLInputElement>(null!);\r\n  const lenRef = useRef<HTMLInputElement>(null!);\r\n\r\n  const onAddBitField = (ev: React.MouseEvent<HTMLButtonElement>) => {\r\n    const name = nameRef.current.value;\r\n    const start = parseInt(startRef.current.value);\r\n    const end = parseInt(endRef.current.value);\r\n    const color = randomColor();\r\n    if (props.bitFields.some(value =>\r\n      start >= value.start && start <= value.end)) {\r\n      alert(\"Invalid bitfield: Must not intersect with other bit fields.\");\r\n      return;\r\n    }\r\n    props.addBitField({\r\n      name: name,\r\n      start: start,\r\n      end: end,\r\n      color: color\r\n    });\r\n  }\r\n\r\n  const changeStart = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n    const textbox = ev.currentTarget;\r\n    if (textbox.value) {\r\n      let start = parseInt(textbox.value);\r\n      let endVal = endRef.current.value;\r\n      let lenVal = lenRef.current.value;\r\n      if (endVal) {\r\n        let end = parseInt(endVal);\r\n        lenRef.current.value = ((end - start) + 1).toString();\r\n      }\r\n      else if (lenVal) {\r\n        let len = parseInt(lenVal);\r\n        endRef.current.value = (start + len).toString();\r\n      }\r\n    }\r\n  }\r\n\r\n  const changeEnd = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n    const textbox = ev.currentTarget;\r\n    if (textbox.value) {\r\n      let end = parseInt(textbox.value);\r\n      let startVal = startRef.current.value;\r\n      let lenVal = lenRef.current.value;\r\n      if (startVal) {\r\n        let start = parseInt(startVal);\r\n        lenRef.current.value = ((end - start) + 1).toString();\r\n      }\r\n      else if (lenVal) {\r\n        let len = parseInt(lenVal);\r\n        startRef.current.value = (end - len).toString();\r\n      }\r\n    }\r\n  }\r\n\r\n  const changeLen = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n    const textbox = ev.currentTarget;\r\n    if (textbox.value) {\r\n      let len = parseInt(textbox.value);\r\n      let startVal = startRef.current.value;\r\n      let endVal = endRef.current.value;\r\n      if (startVal) {\r\n        let start = parseInt(startVal);\r\n        endRef.current.value = (start + len).toString();\r\n      }\r\n      else if (endVal) {\r\n        let end = parseInt(endRef.current.value);\r\n        startRef.current.value = (end - len).toString();\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            inputRef={nameRef}\r\n            fullWidth\r\n            type=\"text\"\r\n            variant=\"outlined\"\r\n            placeholder=\"name\" />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"text\"\r\n            inputRef={startRef}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            placeholder=\"start\"\r\n            onChange={changeStart} />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            inputRef={endRef}\r\n            fullWidth\r\n            type=\"text\"\r\n            variant=\"outlined\"\r\n            placeholder=\"end\"\r\n            onChange={changeEnd} />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            inputRef={lenRef}\r\n            fullWidth\r\n            type=\"text\"\r\n            variant=\"outlined\"\r\n            placeholder=\"len\"\r\n            onChange={changeLen} />\r\n        </Grid>\r\n      \r\n        <Button \r\n          color=\"primary\" \r\n          variant=\"outlined\"\r\n          onClick={onAddBitField}>\r\n          Add Field\r\n        </Button>\r\n      </Grid>\r\n\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Name</TableCell>\r\n            <TableCell>Start</TableCell>\r\n            <TableCell>End</TableCell>\r\n            <TableCell>Length</TableCell>\r\n            <TableCell>Value</TableCell>\r\n            <TableCell>Mask</TableCell>\r\n            <TableCell></TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n\r\n        <TableBody>\r\n          {props.bitFields.map(\r\n            field => Field(field, props.value, props.removeBitField))}\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}","import React, { ChangeEvent, useState } from 'react'\r\nimport BitField from './BitField';\r\nimport { BitTable } from './BitTable';\r\nimport { FieldTable } from './FieldTable';\r\nimport Container from '@material-ui/core/Container'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  main: {\r\n    marginTop: theme.spacing(8),\r\n    marginBottom: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  }\r\n}));\r\n\r\ninterface BitVisualizerProps {\r\n  initialValue?: bigint,\r\n  initialBitFields?: BitField[]\r\n  initialLittleEndian?: boolean\r\n}\r\n\r\nexport const BitVisualizer = ({\r\n  initialValue = BigInt(0),\r\n  initialBitFields = [],\r\n  initialLittleEndian = false\r\n}: BitVisualizerProps) => {\r\n\r\n  let [value, setValue] = useState<bigint>(initialValue);\r\n  let [bitFields, setBitFields] = useState<BitField[]>(initialBitFields);\r\n\r\n  const parseValue = (text: string) => {\r\n    try {\r\n      return BigInt(text);\r\n    }\r\n    catch (err) {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  const changeValue = (ev: ChangeEvent<HTMLInputElement>) => {\r\n    let nval = parseValue(ev.target.value);\r\n    if (nval !== undefined) {\r\n      setValue(nval);\r\n    }\r\n  }\r\n\r\n  const addBitField = (bitField: BitField) => {\r\n    setBitFields(bitFields.concat(bitField));\r\n  }\r\n\r\n  const removeBitField = (bitField: BitField) => {\r\n    setBitFields(bitFields.filter(item => item !== bitField));\r\n  }\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container className={classes.main}>\r\n      <TextField\r\n        type=\"text\"\r\n        inputProps={{\r\n          style: {\r\n            textAlign: \"center\",\r\n            fontFamily: \"monospace\"\r\n          }\r\n        }}\r\n        placeholder=\"Enter value here..\"\r\n        defaultValue={value.toString()}\r\n        onChange={changeValue} />\r\n\r\n      <BitTable\r\n        value={value}\r\n        bitFields={bitFields} />\r\n\r\n      <FieldTable\r\n        value={value}\r\n        bitFields={bitFields}\r\n        addBitField={addBitField}\r\n        removeBitField={removeBitField} />\r\n    </Container>\r\n  );\r\n}","import React from 'react';\nimport BitField from './components/BitField';\nimport { BitVisualizer } from './components/BitVisualizer';\nimport {randomColor} from './utils/Utilities'\n\nfunction App() {\n  let queryString = new URLSearchParams(window.location.search);\n  let value = queryString.get('value');\n  let fields = queryString.get('bitFields');\n  let bitFields: BitField[] = [];\n  if (fields) {\n    try {\n      bitFields = JSON.parse(fields);\n      for (const bitField of bitFields) {\n        bitField.color = randomColor();\n      }\n    }\n    catch (e) {\n      alert(e);\n    }\n  }\n\n  return (\n    <>\n      <BitVisualizer \n        initialValue={BigInt(value ? value : 0)}\n        initialBitFields={bitFields}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}